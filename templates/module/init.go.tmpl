// AUTO-GENERATED FILE 
// This file was generated by Photon Codegen.
//
// DO NOT EDIT THIS FILE MANUALLY.
// Any changes made here will be overwritten the next time the code generator runs.
// 
// To make changes, please update the corresponding source definitions
// and rerun the codegen tool.
//
// Unauthorized modifications may lead to broken builds, lost changes,
// and severe damage to developer morale.
//

package {{.ModuleNormalizedName}}

import(
  "github.com/smtdfc/photon"
  "{{.PkgName}}/domain"
)

var _module *photon.Module
var _service domain.I{{.ModuleName}}Service
var initialized bool


func inject[T any](name: string) T{
  if _module == nil{
    panic("Module {{.ModuleName}} is not inited !")
  }
  
  return photon.Inject[T](_module,name)
}

func service() domain.I{{.ModuleName}}Service{
  return _service
}

func self() *photon.Module{
  if _module == nil{
    panic("Module {{.ModuleName}} is not inited !")
  }
  
  return _module
}

type {{.ModuleName}}Provide struct{}
type {{.ModuleName}}Service struct{}

func initService() domain.I{{.ModuleName}}Service{
  return &{{.ModuleName}}Service{}
}

func provide() domain.I{{.ModuleName}}Provide{
  return &{{.ModuleName}}Provide{}
}

func Init(app *photon.App) *photon.Module{
  if initialized {
    panic("Module {{.ModuleName}} already initialized!")
  }

  _module = photon.CreateModule(app,"{{.ModuleName}}")
  _module.Provide(provide())
  _module.Router.Prefix = ROUTE_PREFIX
  _service = initService()
  initialized = true
  return module
}